
package com.hael.wsClient;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.7.0
 * 2012-11-03T12:11:27.606-04:00
 * Generated source version: 2.7.0
 * 
 */
public final class JumpCalculator_JumpCalculatorImplPort_Client {

    private static final QName SERVICE_NAME = new QName("http://evetool.hael.com/", "JumpCalculatorImplService");

    private JumpCalculator_JumpCalculatorImplPort_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = JumpCalculatorImplService.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        JumpCalculatorImplService ss = new JumpCalculatorImplService(wsdlURL, SERVICE_NAME);
        JumpCalculator port = ss.getJumpCalculatorImplPort();  
        
        {
        System.out.println("Invoking getNpcKillsFor...");
        com.hael.wsClient.SolarSystem _getNpcKillsFor_solarSystem = new com.hael.wsClient.SolarSystem();
        _getNpcKillsFor_solarSystem.setName("Name-1838507095");
        java.util.List<java.lang.String> _getNpcKillsFor_solarSystemNeighbourNames = new java.util.ArrayList<java.lang.String>();
        java.lang.String _getNpcKillsFor_solarSystemNeighbourNamesVal1 = "_getNpcKillsFor_solarSystemNeighbourNamesVal1342364241";
        _getNpcKillsFor_solarSystemNeighbourNames.add(_getNpcKillsFor_solarSystemNeighbourNamesVal1);
        _getNpcKillsFor_solarSystem.getNeighbourNames().addAll(_getNpcKillsFor_solarSystemNeighbourNames);
        _getNpcKillsFor_solarSystem.setSecurity(0.9388865f);
        _getNpcKillsFor_solarSystem.setSolarSystemID(-622252928);
        javax.xml.datatype.XMLGregorianCalendar _getNpcKillsFor_from = javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2012-11-03T12:11:27.708-04:00");
        javax.xml.datatype.XMLGregorianCalendar _getNpcKillsFor_to = javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2012-11-03T12:11:27.716-04:00");
        try {
            java.util.List<com.hael.wsClient.MapSolarSystemNpcKillLog> _getNpcKillsFor__return = port.getNpcKillsFor(_getNpcKillsFor_solarSystem, _getNpcKillsFor_from, _getNpcKillsFor_to);
            System.out.println("getNpcKillsFor.result=" + _getNpcKillsFor__return);

        } catch (NotARealSolarSystemException e) { 
            System.out.println("Expected exception: NotARealSolarSystemException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking shortestRoute...");
        java.lang.String _shortestRoute_from = "_shortestRoute_from2086602789";
        java.lang.String _shortestRoute_to = "_shortestRoute_to165119033";
        float _shortestRoute_minSecurity = 0.22441542f;
        float _shortestRoute_maxSecurity = 0.82234776f;
        try {
            java.util.List<com.hael.wsClient.SolarSystem> _shortestRoute__return = port.shortestRoute(_shortestRoute_from, _shortestRoute_to, _shortestRoute_minSecurity, _shortestRoute_maxSecurity);
            System.out.println("shortestRoute.result=" + _shortestRoute__return);

        } catch (NoPathExistsException_Exception e) { 
            System.out.println("Expected exception: NoPathExistsException has occurred.");
            System.out.println(e.toString());
        } catch (IOException_Exception e) { 
            System.out.println("Expected exception: IOException has occurred.");
            System.out.println(e.toString());
        } catch (NotARealSolarSystemException e) { 
            System.out.println("Expected exception: NotARealSolarSystemException has occurred.");
            System.out.println(e.toString());
        } catch (NotEnoughArgumentsException e) { 
            System.out.println("Expected exception: NotEnoughArgumentsException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getJumpsFor...");
        com.hael.wsClient.SolarSystem _getJumpsFor_solarSystem = new com.hael.wsClient.SolarSystem();
        _getJumpsFor_solarSystem.setName("Name-387775230");
        java.util.List<java.lang.String> _getJumpsFor_solarSystemNeighbourNames = new java.util.ArrayList<java.lang.String>();
        java.lang.String _getJumpsFor_solarSystemNeighbourNamesVal1 = "_getJumpsFor_solarSystemNeighbourNamesVal-1139918783";
        _getJumpsFor_solarSystemNeighbourNames.add(_getJumpsFor_solarSystemNeighbourNamesVal1);
        _getJumpsFor_solarSystem.getNeighbourNames().addAll(_getJumpsFor_solarSystemNeighbourNames);
        _getJumpsFor_solarSystem.setSecurity(0.19630897f);
        _getJumpsFor_solarSystem.setSolarSystemID(-258953227);
        javax.xml.datatype.XMLGregorianCalendar _getJumpsFor_from = javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2012-11-03T12:11:27.725-04:00");
        javax.xml.datatype.XMLGregorianCalendar _getJumpsFor_to = javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2012-11-03T12:11:27.725-04:00");
        try {
            java.util.List<com.hael.wsClient.MapSolarSystemJumpLog> _getJumpsFor__return = port.getJumpsFor(_getJumpsFor_solarSystem, _getJumpsFor_from, _getJumpsFor_to);
            System.out.println("getJumpsFor.result=" + _getJumpsFor__return);

        } catch (NotARealSolarSystemException e) { 
            System.out.println("Expected exception: NotARealSolarSystemException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getSystem...");
        java.lang.String _getSystem_name = "_getSystem_name-850713334";
        try {
            com.hael.wsClient.SolarSystem _getSystem__return = port.getSystem(_getSystem_name);
            System.out.println("getSystem.result=" + _getSystem__return);

        } catch (IOException_Exception e) { 
            System.out.println("Expected exception: IOException has occurred.");
            System.out.println(e.toString());
        } catch (NotARealSolarSystemException e) { 
            System.out.println("Expected exception: NotARealSolarSystemException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking systemNameLookup...");
        java.lang.String _systemNameLookup_string = "_systemNameLookup_string2110272205";
        try {
            java.util.List<java.lang.String> _systemNameLookup__return = port.systemNameLookup(_systemNameLookup_string);
            System.out.println("systemNameLookup.result=" + _systemNameLookup__return);

        } catch (IOException_Exception e) { 
            System.out.println("Expected exception: IOException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getPcKillsFor...");
        com.hael.wsClient.SolarSystem _getPcKillsFor_solarSystem = new com.hael.wsClient.SolarSystem();
        _getPcKillsFor_solarSystem.setName("Name76709602");
        java.util.List<java.lang.String> _getPcKillsFor_solarSystemNeighbourNames = new java.util.ArrayList<java.lang.String>();
        java.lang.String _getPcKillsFor_solarSystemNeighbourNamesVal1 = "_getPcKillsFor_solarSystemNeighbourNamesVal1284263588";
        _getPcKillsFor_solarSystemNeighbourNames.add(_getPcKillsFor_solarSystemNeighbourNamesVal1);
        _getPcKillsFor_solarSystem.getNeighbourNames().addAll(_getPcKillsFor_solarSystemNeighbourNames);
        _getPcKillsFor_solarSystem.setSecurity(0.91279024f);
        _getPcKillsFor_solarSystem.setSolarSystemID(1446311138);
        javax.xml.datatype.XMLGregorianCalendar _getPcKillsFor_from = javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2012-11-03T12:11:27.729-04:00");
        javax.xml.datatype.XMLGregorianCalendar _getPcKillsFor_to = javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2012-11-03T12:11:27.729-04:00");
        try {
            java.util.List<com.hael.wsClient.MapSolarSystemPcKillLog> _getPcKillsFor__return = port.getPcKillsFor(_getPcKillsFor_solarSystem, _getPcKillsFor_from, _getPcKillsFor_to);
            System.out.println("getPcKillsFor.result=" + _getPcKillsFor__return);

        } catch (NotARealSolarSystemException e) { 
            System.out.println("Expected exception: NotARealSolarSystemException has occurred.");
            System.out.println(e.toString());
        }
            }

        System.exit(0);
    }

}
