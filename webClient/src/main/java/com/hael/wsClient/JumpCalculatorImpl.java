
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.hael.wsClient;

import java.util.logging.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.7.0
 * 2012-11-03T12:11:27.783-04:00
 * Generated source version: 2.7.0
 * 
 */

@javax.jws.WebService(
                      serviceName = "JumpCalculatorImplService",
                      portName = "JumpCalculatorImplPort",
                      targetNamespace = "http://evetool.hael.com/",
                      wsdlLocation = "http://localhost:8080/web/JumpCalculator?wsdl",
                      endpointInterface = "com.hael.wsClient.JumpCalculator")
                      
public class JumpCalculatorImpl implements JumpCalculator {

    private static final Logger LOG = Logger.getLogger(JumpCalculatorImpl.class.getName());

    /* (non-Javadoc)
     * @see com.hael.wsClient.JumpCalculator#getNpcKillsFor(com.hael.wsClient.SolarSystem  solarSystem ,)javax.xml.datatype.XMLGregorianCalendar  from ,)javax.xml.datatype.XMLGregorianCalendar  to )*
     */
    public java.util.List<com.hael.wsClient.MapSolarSystemNpcKillLog> getNpcKillsFor(com.hael.wsClient.SolarSystem solarSystem,javax.xml.datatype.XMLGregorianCalendar from,javax.xml.datatype.XMLGregorianCalendar to) throws NotARealSolarSystemException    { 
        LOG.info("Executing operation getNpcKillsFor");
        System.out.println(solarSystem);
        System.out.println(from);
        System.out.println(to);
        try {
            java.util.List<com.hael.wsClient.MapSolarSystemNpcKillLog> _return = new java.util.ArrayList<com.hael.wsClient.MapSolarSystemNpcKillLog>();
            com.hael.wsClient.MapSolarSystemNpcKillLog _returnVal1 = new com.hael.wsClient.MapSolarSystemNpcKillLog();
            com.hael.wsClient.ActivityLogPK _returnVal1Pk = new com.hael.wsClient.ActivityLogPK();
            _returnVal1Pk.setSolarSystemID(2117974648);
            _returnVal1Pk.setTimeRetrieved(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2012-11-03T12:11:27.801-04:00"));
            _returnVal1.setPk(_returnVal1Pk);
            _returnVal1.setValue(-1220946473);
            _return.add(_returnVal1);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new NotARealSolarSystemException("NotARealSolarSystemException...");
    }

    /* (non-Javadoc)
     * @see com.hael.wsClient.JumpCalculator#shortestRoute(java.lang.String  from ,)java.lang.String  to ,)float  minSecurity ,)float  maxSecurity )*
     */
    public java.util.List<com.hael.wsClient.SolarSystem> shortestRoute(java.lang.String from,java.lang.String to,float minSecurity,float maxSecurity) throws NoPathExistsException_Exception , IOException_Exception , NotARealSolarSystemException , NotEnoughArgumentsException    { 
        LOG.info("Executing operation shortestRoute");
        System.out.println(from);
        System.out.println(to);
        System.out.println(minSecurity);
        System.out.println(maxSecurity);
        try {
            java.util.List<com.hael.wsClient.SolarSystem> _return = new java.util.ArrayList<com.hael.wsClient.SolarSystem>();
            com.hael.wsClient.SolarSystem _returnVal1 = new com.hael.wsClient.SolarSystem();
            _returnVal1.setName("Name-449471065");
            java.util.List<java.lang.String> _returnVal1NeighbourNames = new java.util.ArrayList<java.lang.String>();
            java.lang.String _returnVal1NeighbourNamesVal1 = "_returnVal1NeighbourNamesVal453813975";
            _returnVal1NeighbourNames.add(_returnVal1NeighbourNamesVal1);
            _returnVal1.getNeighbourNames().addAll(_returnVal1NeighbourNames);
            _returnVal1.setSecurity(0.83540213f);
            _returnVal1.setSolarSystemID(1445510796);
            _return.add(_returnVal1);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new NoPathExistsException_Exception("NoPathExistsException...");
        //throw new IOException_Exception("IOException...");
        //throw new NotARealSolarSystemException("NotARealSolarSystemException...");
        //throw new NotEnoughArgumentsException("NotEnoughArgumentsException...");
    }

    /* (non-Javadoc)
     * @see com.hael.wsClient.JumpCalculator#getJumpsFor(com.hael.wsClient.SolarSystem  solarSystem ,)javax.xml.datatype.XMLGregorianCalendar  from ,)javax.xml.datatype.XMLGregorianCalendar  to )*
     */
    public java.util.List<com.hael.wsClient.MapSolarSystemJumpLog> getJumpsFor(com.hael.wsClient.SolarSystem solarSystem,javax.xml.datatype.XMLGregorianCalendar from,javax.xml.datatype.XMLGregorianCalendar to) throws NotARealSolarSystemException    { 
        LOG.info("Executing operation getJumpsFor");
        System.out.println(solarSystem);
        System.out.println(from);
        System.out.println(to);
        try {
            java.util.List<com.hael.wsClient.MapSolarSystemJumpLog> _return = new java.util.ArrayList<com.hael.wsClient.MapSolarSystemJumpLog>();
            com.hael.wsClient.MapSolarSystemJumpLog _returnVal1 = new com.hael.wsClient.MapSolarSystemJumpLog();
            com.hael.wsClient.ActivityLogPK _returnVal1Pk = new com.hael.wsClient.ActivityLogPK();
            _returnVal1Pk.setSolarSystemID(223269638);
            _returnVal1Pk.setTimeRetrieved(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2012-11-03T12:11:27.804-04:00"));
            _returnVal1.setPk(_returnVal1Pk);
            _returnVal1.setValue(1145139788);
            _return.add(_returnVal1);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new NotARealSolarSystemException("NotARealSolarSystemException...");
    }

    /* (non-Javadoc)
     * @see com.hael.wsClient.JumpCalculator#getSystem(java.lang.String  name )*
     */
    public com.hael.wsClient.SolarSystem getSystem(java.lang.String name) throws IOException_Exception , NotARealSolarSystemException    { 
        LOG.info("Executing operation getSystem");
        System.out.println(name);
        try {
            com.hael.wsClient.SolarSystem _return = new com.hael.wsClient.SolarSystem();
            _return.setName("Name-1458469252");
            java.util.List<java.lang.String> _returnNeighbourNames = new java.util.ArrayList<java.lang.String>();
            java.lang.String _returnNeighbourNamesVal1 = "_returnNeighbourNamesVal-1334325120";
            _returnNeighbourNames.add(_returnNeighbourNamesVal1);
            _return.getNeighbourNames().addAll(_returnNeighbourNames);
            _return.setSecurity(0.44688267f);
            _return.setSolarSystemID(-1390934181);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new IOException_Exception("IOException...");
        //throw new NotARealSolarSystemException("NotARealSolarSystemException...");
    }

    /* (non-Javadoc)
     * @see com.hael.wsClient.JumpCalculator#systemNameLookup(java.lang.String  string )*
     */
    public java.util.List<java.lang.String> systemNameLookup(java.lang.String string) throws IOException_Exception    { 
        LOG.info("Executing operation systemNameLookup");
        System.out.println(string);
        try {
            java.util.List<java.lang.String> _return = new java.util.ArrayList<java.lang.String>();
            java.lang.String _returnVal1 = "_returnVal529663153";
            _return.add(_returnVal1);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new IOException_Exception("IOException...");
    }

    /* (non-Javadoc)
     * @see com.hael.wsClient.JumpCalculator#getPcKillsFor(com.hael.wsClient.SolarSystem  solarSystem ,)javax.xml.datatype.XMLGregorianCalendar  from ,)javax.xml.datatype.XMLGregorianCalendar  to )*
     */
    public java.util.List<com.hael.wsClient.MapSolarSystemPcKillLog> getPcKillsFor(com.hael.wsClient.SolarSystem solarSystem,javax.xml.datatype.XMLGregorianCalendar from,javax.xml.datatype.XMLGregorianCalendar to) throws NotARealSolarSystemException    { 
        LOG.info("Executing operation getPcKillsFor");
        System.out.println(solarSystem);
        System.out.println(from);
        System.out.println(to);
        try {
            java.util.List<com.hael.wsClient.MapSolarSystemPcKillLog> _return = new java.util.ArrayList<com.hael.wsClient.MapSolarSystemPcKillLog>();
            com.hael.wsClient.MapSolarSystemPcKillLog _returnVal1 = new com.hael.wsClient.MapSolarSystemPcKillLog();
            com.hael.wsClient.ActivityLogPK _returnVal1Pk = new com.hael.wsClient.ActivityLogPK();
            _returnVal1Pk.setSolarSystemID(1519897720);
            _returnVal1Pk.setTimeRetrieved(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2012-11-03T12:11:27.807-04:00"));
            _returnVal1.setPk(_returnVal1Pk);
            _returnVal1.setValue(-867404126);
            _return.add(_returnVal1);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new NotARealSolarSystemException("NotARealSolarSystemException...");
    }

}
